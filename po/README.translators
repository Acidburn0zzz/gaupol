Translating Gaupol
==================

Table of Contents

  1. Introduction
  2. Creating a new .po file
  3. Updating an existing .po file
  4. Compiling .mo files
  5. Testing your translation
  6. Submitting your translation
  7. References


1. Introduction
===============

  This README file assumes that you are familiar with gettext and that you
  know what to do with a .po file.

  To avoid doing pointless work, first check the latest list of existing
  translations at the subversion trunk:

     http://svn.gna.org/viewcvs/gaupol/trunk/po/

  Gaupol uses the standard gettext system for translations. A script called
  "trantool" has been written to perform all the necessary file manipulations
  for the translation files. trantool relies on the following executables:

    * intltool-extract
    * msgfmt
    * msginit
    * msgmerge
    * xgettext

  trantool will create the .po file by extracting strings from the Glade XML
  files and the Python source code files. Desktop file "gaupol.desktop" needs
  to be translated separately.

  To print a help message on using trantool, run command

    ./trantool --help

  The process done by trantool is modelled after PyGTK FAQ 22.2[1].


2. Creating a new .po file
==========================

  To create a new .po file, run command

    ./trantool -p LANG

  where LANG is the language code in format "xx" or "xx_YY". The resulting .po
  file is placed in the "po" directory.


3. Updating an existing .po file
================================

  To update an existing .po file with new strings that have been added since
  the last update, run command

    ./trantool -u LANG

  To update all .po files, substitute LANG with "all".


4. Compiling .mo files
======================

  To compile a .mo file based on the .po file you have translated, run command

    ./trantool -m LANG

  To compile all languages, substitute LANG with "all". The resulting .mo
  file is placed in the "locale" directory according to standard locale
  directory hierarchy.

  The compilation will perform checks on header, format and domain of the .po
  file. Correct any errors encountered.


5. Testing your translation
===========================

  After you have compiled a .mo file, the translation is available to Gaupol.

  To start Gaupol with a translation in your current locale, run command

    ./gaupol

  To start gaupol without a translation, run command

    LANG=C ./gaupol --no-translation


6. Submitting your translation
==============================

  All .po files should be UTF-8 encoded. If not already, convert to UTF-8

    mv xx.po xx.po.bak
    msgconv -t UTF-8 xx.po.bak -o xx.po

  When you are done, send the .po file and the desktop file "gaupol.desktop"
  by e-mail to otsaloma@cc.hut.fi.


7. References
=============

  [1] http://www.async.com.br/faq/pygtk/index.py?req=show&file=faq22.002.htp
