#!/usr/bin/env python

# Copyright (C) 2005 Osmo Salomaa
#
# This file is part of Gaupol.
#
# Gaupol is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Gaupol is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Gaupol; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


"""
Automation of translation related tasks for Gaupol.

Tasks handled by this script:
- creating a new .po file
- updating an existing .po file
- compiling .mo files

Needed tools:
- intltool-extract
- msgfmt
- msginit
- msgmerge
- xgettext

Translatable strings are extracted from Glade XML files and Python source
code files.
"""


import optparse
import os
import sys

# Directories
WORK_DIR   = os.path.dirname(os.path.abspath(sys.argv[0]))
GLADE_DIR  = os.path.join(WORK_DIR, 'data'  , 'glade')
LIB_DIR    = os.path.join(WORK_DIR, 'lib'            )
LOCALE_DIR = os.path.join(WORK_DIR, 'locale'         )
PO_DIR     = os.path.join(WORK_DIR, 'po'             )

# Files
POT_PATH = os.path.join(PO_DIR, 'gaupol.pot')

# Paths of the C header files created from the Glade XML files.
h_paths  = []

# Paths of the Python source code files.
py_paths = []


def check_write_permissions(dirnames):
    """Check that the write permissions to dirnames exist and exit if not."""
    
    for dirname in dirnames:
    
        # If the directory doesn't exist, it needs to be created i.e.
        # write permissions are needed to its parent directory.
        while not os.path.isdir(dirname):
            dirname = os.path.join(dirname, '..')
            
        if not os.access(dirname, os.W_OK):
            sys.exit('You need write permissions to directory "%s".' % dirname)
    
def compile_mo(lang):
    """Compile binary .mo file for language lang."""

    for lang in get_languages(lang):

        fancy_print('Compiling .mo file for language "%s"...' % lang)

        po_path = os.path.join(PO_DIR, '%s.po' % lang)
        mo_dir  = os.path.join(LOCALE_DIR, lang, 'LC_MESSAGES')
        mo_path = os.path.join(mo_dir, 'gaupol.mo')
        
        if not os.path.isdir(mo_dir):
            os.makedirs(mo_dir)
            
        os.system('msgfmt %s -o %s' % (po_path, mo_path))

def create_po(lang):
    """Create a .po file for a new language."""
    
    po_path = os.path.join(PO_DIR, '%s.po' % lang)
    
    if os.path.isfile(po_path):
        print '.po file for language "%s" already exists.' % lang
        print 'Use the "-u" option to update the existing file.'
        return

    fancy_print('Creating .po file for language "%s"...' % lang)
    
    os.system('msginit -l %s -i %s -o %s' % (lang, POT_PATH, po_path))

def create_pot():
    """Create a .pot file."""
    
    extract_strings_from_glade_files()
    get_python_source_files()
    extract_strings_from_source_files()

def extract_strings_from_glade_files():
    """Extract strings from Glade XML files to C header files."""

    fancy_print('Extracting strings from Glade XML files...')

    for (dirpath, dirnames, basenames) in os.walk(GLADE_DIR):
        os.chdir(dirpath)
        for basename in basenames:
            if not basename.endswith('.glade'):
                continue
            os.system('intltool-extract --type=gettext/glade %s' % basename)
            h_paths.append(os.path.join(dirpath, '%s.h' % basename))

def extract_strings_from_source_files():
    """Extract strings from .py and .h source files to a .pot file."""

    fancy_print('Generating a .pot file from all source files...')

    paths = h_paths + py_paths

    # Cut WORK_DIR out of paths to have only relevant parts of the paths
    # printed in the .po file.
    paths = [path.replace(WORK_DIR, '.') for path in paths]

    os.chdir(WORK_DIR)
    path_arg = ' '.join(paths)
    os.system('xgettext -k_ -kN_ -c -o %s %s' % (POT_PATH, path_arg))

def fancy_print(text):
    """Print a message that stands out from rest of the output."""

    line = '=' * len(text)
    print '\n'.join((line, text, line))

def get_languages(lang):
    """
    Get a list of languages.
    
    lang = xx_YY or "all"
    """
    langs = []
    if lang == 'all':
        paths = os.listdir(PO_DIR)
        for path in paths:
            if path.endswith('.po'):
                langs.append(os.path.basename(path)[:-3])
    else:
        langs.append(lang)

    return langs

def get_python_source_files():
    """Get a list of Python source code files."""

    for (dirpath, dirnames, basenames) in os.walk(LIB_DIR):
        for basename in basenames:
            if basename.endswith('.py'):
                py_paths.append(os.path.join(dirpath, basename))

def parse_options():
    """
    Parse given command line options and arguments.
    
    Return: options, arguments
    """
    parser = optparse.OptionParser(
        description='<lang> should be either format "xx" or "xx_YY", ' + \
                     'e.g. "fi" or "zh_CN". Use "all" to process all ' + \
                     'languages found in the "po" directory.'
    )
    
    parser.add_option(
        '-c', '', action='store', type='string', 
        metavar='<lang>', dest='create_po', default=False,
        help='create a new .po file'
    )
    parser.add_option(
        '-u', '', action='store', type='string',
        metavar='<lang/all>', dest='update_po', default=False,
        help='update an existing .po file'
    )
    parser.add_option(
        '-m', '', action='store', type='string',
        metavar='<lang/all>', dest='compile_mo', default=False,
        help='compile a .mo file'
    )

    return parser.parse_args(sys.argv)

def remove_temporary_files():
    """Remove temporary files created during operations."""

    fancy_print('Removing temporary files...')

    # .pot file
    print POT_PATH.replace(WORK_DIR, '.')
    os.remove(POT_PATH)
    
    # .h files
    for path in h_paths:
        print path.replace(WORK_DIR, '.')
        os.remove(path)

def update_po(lang):
    """Update an existing .po file with new strings."""

    for lang in get_languages(lang):

        fancy_print('Updating .po file for language "%s"...' % lang)
        
        po_path = os.path.join(PO_DIR, '%s.po' % lang)
        os.system('msgmerge -U %s %s' % (po_path, POT_PATH))


if __name__ == '__main__':

    opts, args = parse_options()
    
    if opts.create_po:
    
        check_write_permissions([GLADE_DIR, PO_DIR])
        create_pot()
        create_po(opts.create_po)
        remove_temporary_files()

    elif opts.update_po:
    
        check_write_permissions([GLADE_DIR, PO_DIR])
        create_pot()
        update_po(opts.update_po)
        remove_temporary_files()

    elif opts.compile_mo:
    
        check_write_permissions([LOCALE_DIR])
        compile_mo(opts.compile_mo)

    else:
        print 'Type "./trantool -h" for help.'
